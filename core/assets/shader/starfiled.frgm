#ifdef GL_ES
precision mediump float;
#endif 

// varying input variables from our vertex shader
varying vec4 v_color;
varying vec2 v_texCoords;

// a special uniform for textures 
uniform sampler2D u_texture;
uniform float timePass;

#define iterations 17 //default 17
#define formuparam 0.53

#define volsteps 20	//default 20
#define stepsize 0.1

#define zoom   0.800
#define tile   0.850
#define speed  0.01 

#define brightness 0.0015
#define darkmatter 0.300	//default 0.300
#define distfading 0.730	//default 0.730
#define saturation 0.850

void main(void) {
	
	gl_FragColor = v_color * texture2D(u_texture, v_texCoords);

	//uniform che dovrei passare
	vec2 iResolution = vec2(800.,600.);

	//get coords and direction
	vec2 uv = gl_FragCoord.xy/iResolution.xy-.5;
	uv.y*=iResolution.y/iResolution.x;
	vec3 dir=vec3(uv*zoom,1.);

	//rotation
	mat2 rot1=mat2(cos(0.2),sin(0.2),-sin(0.2),cos(0.2));
	mat2 rot2=mat2(cos(0.3),sin(0.3),-sin(0.3),cos(0.3));
	dir.xz*=rot1;
	dir.xy*=rot2;
	vec3 from=vec3(1.,.5,0.5);
	
	//move the space
	float time=timePass*speed+.25;	
	from+=vec3(time*1.,time*1.,-2.);
	
	//rotate t
	from.xz*=rot1;
	from.xy*=rot2;
	
	//volumetric rendering
	float s=0.1,fade=1.;
	vec3 v=vec3(0.);
	for (int r=0; r<volsteps; r++) {
		vec3 p=from+s*dir*.5;
		p = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold
		float pa,a=pa=0.;
		for (int i=0; i<iterations; i++) { 
			p=abs(p)/dot(p,p)-formuparam; // the magic formula
			a+=abs(length(p)-pa); // absolute sum of average change
			pa=length(p);
		}
		float dm=max(0.,darkmatter-a*a*.001); //dark matter
		a*=a*a; // add contrast
		if (r>6) 
			fade*=1.-dm; // dark matter, don't render near
		
		v+=fade;
		v+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance
		fade*=distfading; // distance fading
		s+=stepsize;
	}
	v=mix(vec3(length(v)),v,saturation); //color adjust
	gl_FragColor = vec4(v*.01,1.);	

}